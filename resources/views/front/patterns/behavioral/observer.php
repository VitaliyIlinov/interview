<h2>
    Наблюдатель
    <a class="btn btn-secondary" target="_blank"
       href="https://refactoring.guru/ru/design-patterns/observer">
        refactoring.guru
    </a>
    <a class="btn btn-secondary" target="_blank"
       href="https://tproger.ru/translations/design-patterns-simple-words-1/#14">
        Интересный пример
    </a>
</h2>
<p>
    <b>Наблюдатель</b> — это поведенческий паттерн проектирования, который создаёт механизм подписки, позволяющий одним
    объектам следить и реагировать на события, происходящие в других объектах.
</p>
<p>
    <b>Проблема</b> Представьте, что вы имеете два объекта: Покупатель и Магазин. В магазин вот-вот должны завезти новый
    товар, который интересен покупателю.
</p>
<p>
    Покупатель может каждый день ходить в магазин, чтобы проверить наличие товара. Но при этом он будет злиться, без
    толку тратя своё драгоценное время.
</p>
<p>
    <b>Пример из жизни:</b> Хороший пример: люди, ищущие работу, подписываются на публикации на сайтах вакансий и получают
    уведомления, когда появляются вакансии подходящие по параметрам.
</p>
<pre>
    <code class="php">
        <?php
        require_once app()->getBasePath('Models/Front/Info/Patterns/Behavioral/Observer.php');
        ?>
    </code>
</pre>