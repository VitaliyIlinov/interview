Источники&raquo;
<a class="btn btn-secondary" target="_blank"
   href="https://ru.wikipedia.org/wiki/KISS_(%D0%BF%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF)" role="button">
    wikipedia
</a>
<h2>KISS (принцип)</h2>
<p><b>KISS(«Keep it simple, stupid»)</b> - принцип проектирвоания. Принцип KISS утверждает, что большинство
    систем работают лучше всего, если они остаются простыми, а не усложняются. Поэтому в области проектирования простота
    должна быть одной из ключевых целей, и следует избегать ненужной сложности.

</p>
<ul>
    <li>
        Разбивайте задачи на подзадачи которые не должны по вашему мнению длиться более 4-12 часов написания кода
    </li>
    <li>Разбивайте задачу на множество более маленьких задач, каждая задача должна решаться одним или парой классов
    </li>
    <li>Сохраняйте ваши методы маленькими. Каждый метод должен состоять не более чем из 30-40 строк. Каждый метод должен
        решать одну маленькую задачу, а не множество случаев. Если в вашем методе множество условий, разбейте его на
        несколько. Это повысит читаемость, позволит легче поддерживать код и быстрее находить ошибки в нём. Вы полюбите
        улучшать код.
    </li>
    <li>
        Сохраняйте ваши классы маленькими. Здесь применяется та же техника что и с методами.
    </li>
    <li>
        Придумайте решение задачи сначала, потом напишите код. Никогда не поступайте иначе. Многие разработчики
        придумывают решение задачи во время написания кода и в этом нет ничего плохого. Вы можете делать так и при этом
        придерживаться выше обозначенного правила. Если вы можете в уме разбивать задачу на более мелкие части, когда вы
        пишете код, делайте это любыми способами. И не бойтесь переписывать код ещё и ещё и ещё… В счёт не идёт число
        строк, до тех пор пока вы считаете что можно ещё меньше/ещё лучше.
    </li>
    <li>
        Не бойтесь избавляться от кода. Изменение старого кода и написание нового решения два очень важных момента. Если
        вы столкнулись с новыми требованиями, или не были оповещены о них ранее, тогда порой лучше придумать новое более
        изящное решение решающее и старые и новые задачи.
    </li>
</ul>

<h2>Don’t repeat yourself, DRY</h2>
<p><b>Don’t repeat yourself, DRY</b> - это принцип разработки программного обеспечения, нацеленный на снижение
    повторения информации различного рода, особенно в системах со множеством слоёв абстрагирования. Принцип DRY
    формулируется как: «Каждая часть знания должна иметь единственное, непротиворечивое и авторитетное представление в
    рамках системы»
</p>
